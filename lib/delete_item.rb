require 'rubygems'
require 'drhdao'
require 'drhbo'

class ItemManager
  def self.delete_item(item_id)
    p "产品："+item_id.to_s+" 开始删除"
    Drhbo::WEB_REDIS.del('item:'+item_id.to_s+':likes.set')
    Drhbo::WEB_REDIS.zrem(Drhdao::DrhRedis::ITEM_ACCESS_KEY, item_id)
    Drhbo::WEB_REDIS.hdel(Drhdao::DrhRedis::STAT_ITEM_PV_COUNT_HASH_KEY,item_id)
    DrhModels::Like.delete_all(['target_type=? and target_id=?',DrhModels::Like::TARGET_ITEM, item_id])
    DrhModels::Want.delete_all(['item_id=?',item_id])
    DrhModels::Have.delete_all(['item_id=?',item_id])
    DrhModels::ItemStat.delete_all((['item_id=?', item_id]))
    DrhModels::Message.find(:all, :select=>'id, author',:conditions=>['source_category=? and source_reference=?',DrhModels::Message::SRC_CAT_ITEM, item_id]).each do |msg|
      Drhbo::Common::Message.delete_message(msg.author, msg.id, true)
    end
    DrhModels::ItemCategory.delete_all(["item_id=?", item_id])
    # deal with color
    item = DrhModels::Item.find(:first, :select=>"id, color, abstract_item_id", :conditions=>["id=?", item_id])
    unless item
      p "产品："+item_id.to_s + " 删除出错，可能之前已经删除了"
      return
    end
    abi = DrhModels::AbstractItem.find(:first, :select=>"id, colors", :conditions=>["id=?", item.abstract_item_id])
    belong_abi_count = DrhModels::Item.count(:conditions=>["abstract_item_id=?", item.abstract_item_id])
    if belong_abi_count > 1
      color_list = abi.colors.split(",")
      color_list.delete(item.color)
      changed_colors = color_list.empty? ? nil : color_list.join(",")
      DrhModels::AbstractItem.update(abi.id,:colors=>changed_colors)
    else
      DrhModels::AbstractItem.delete(abi.id)
    end
    DrhModels::MerchantProductItem.delete_all(["item_id=?", item_id])
    DrhModels::ItemDetail.delete_all(["item_id=?", item_id])
    DrhModels::Item.delete(item_id)
    DrhModels::ItemDelete.create(:item_id=>item_id,:abstract_item_id=>abi.id)
    p "产品："+item_id.to_s + " 删除完毕"
  end
end


ready_for_del_items = [100009716	,
100009717	,
100009718	,
100010031	,
100010032	,
100010033	,
100010034	,
100010035	,
100014632	,
100014633	,
100014635	,
100015217	,
100015218	,
100015219	,
100015220	,
100015221	,
100015222	,
100015223	,
100015224	,
100015225	,
100015226	,
100015227	,
100015228	,
100015229	,
100015230	,
100015231	,
100015232	,
100015233	,
100015234	,
100015235	,
100015236	,
100015237	,
100015238	,
100015239	,
100015240	,
100015241	,
100015242	,
100015243	,
100015244	,
100015245	,
100015246	,
100015247	,
100015795	,
100015796	,
100015797	,
100015798	,
100015799	,
100015800	,
100015801	,
100015802	,
100015803	,
100015804	,
100015805	,
100015806	,
100015807	,
100015808	,
100015809	,
100015810	,
100015811	,
100015812	,
100015813	,
100015814	,
100015815	,
100015816	,
100015817	,
100015818	,
100015819	,
100015820	,
100015821	,
100015822	,
100015823	,
100015824	,
100015825	,
100015826	,
100015827	,
100015828	,
100015829	,
100015830	,
100015831	,
100015832	,
100015833	,
100015834	,
100015835	,
100015836	,
100015837	,
100015838	,
100015839	,
100015840	,
100016724	,
100017094	,
100017095	,
100017096	,
100017578	,
100017579	,
100017580	,
100017581	,
100017582	,
100017583	,
100017584	,
100017585	,
100017586	,
100017587	,
100017588	,
100017589	,
100017590	,
100017591	,
100017592	,
100017593	,
100017594	,
100017595	,
100017596	,
100017597	,
100018325	,
100018326	,
100018327	,
100018328	,
100018329	,
100018330	,
100018331	,
100018332	,
100018333	,
100018334	,
100018335	,
100018336	,
100018337	,
100018338	,
100018339	,
100018340	,
100018420	,
100018421	,
100018422	,
100018423	,
100018424	,
100018425	,
100018426	,
100018427	,
100018428	,
100018429	,
100018515	,
100018516	,
100018517	,
100018518	,
100018519	,
100018520	,
100018521	,
100018522	,
100018523	,
100018524	,
100018525	,
100018526	,
100018527	,
100018528	,
100018529	,
100018530	,
100018531	,
100018532	,
100018533	,
100018534	,
100018535	,
100018536	,
100018537	,
100018538	,
100018539	,
100018540	,
100018541	,
100018542	,
100018543	,
100018544	,
100018545	,
100018546	,
100018547	,
100019269	,
100019270	,
100019482	,
100019483	,
100019484	,
100019485	,
100019486	,
100019487	,
100019488	,
100020291	,
100020359	,
100020379	,
100020380	,
100020381	,
100020382	,
100020383	,
100020384	,
100020385	,
100020554	,
100020560	,
100020591	,
100020592	,
100020593	,
100020594	,
100020596	,
100021250	,
100021251	,
100021252	,
100021253	,
100021254	,
100021255	,
100021256	,
100021257	,
100021279	,
100021280	,
100021281	,
100021282	,
100021308	,
100021309	,
100021310	,
100021312	,
100021313	,
100021314	,
100021315	,
100021316	,
100021317	,
100021318	,
100021319	,
100021320	,
100021321	,
100021322	,
100021323	,
100021324	,
100021325	,
100021326	,
100021327	,
100021328	,
100021329	,
100021330	,
100021331	,
100021332	,
100021333	,
100021392	,
100021838	,
100021840	,
100088123]

ready_for_del_items.each do |i|
  ItemManager.delete_item(i)
end


